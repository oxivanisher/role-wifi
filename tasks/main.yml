---
- name: Configure wifi before bookworm
  when: ansible_distribution_major_version | int < 12
  block:
    - name: Ensure wpasupplicant
      ansible.builtin.package:
        name: wpasupplicant
        state: present

    - name: Deploy wpa_supplicant config
      ansible.builtin.template:
        src: wpa_supplicant.conf.jinja2
        dest: /etc/wpa_supplicant/wpa_supplicant.conf
        owner: root
        group: root
        mode: "0600"
      notify: Reconfigure wpasupplicant

    - name: Ensure wpasupplicant is enabled
      ansible.builtin.service:
        name: wpa_supplicant
        enabled: true

    - name: Setup wlan0 reconnect hack via crontab
      ansible.builtin.cron:
        name: "wlan0 reconnect hack"
        minute: "*/5"
        state: absent

- name: Configure wifi starting from bookworm (NetworkManager)
  when: ansible_distribution_major_version | int >= 12
  block:
    - name: Gather facts about running services
      ansible.builtin.service_facts:

    - name: Only configure wifi if NetworManager is already running. See the readme for more info.
      when: "ansible_facts.services['NetworkManager.service']['state'] == 'running'"
      block:
        - name: Get current wifi country
          ansible.builtin.command:
            argv:
              - /usr/bin/raspi-config
              - nonint
              - get_wifi_country
          register: wifi_country_out
          changed_when: false
          failed_when: false

        - name: Set wifi country
          ansible.builtin.command:
            argv:
              - /usr/bin/raspi-config
              - nonint
              - do_wifi_country
              - "{{ wifi_country }}"
          when: wifi_country != wifi_country_out.stdout
          changed_when: true
          failed_when: false

        # with forever reconnect, this might be not needed. this is currently tested...
        - name: Setup wlan0 reconnect hack via crontab
          ansible.builtin.cron:
            name: "wlan0 reconnect hack"
            minute: "*/5"
            state: absent

        - name: Configure wifi networks
          community.general.nmcli:
            type: wifi
            conn_name: "{{ item.str }}"
            ssid: "{{ item.ssid }}"
            wifi_sec:
              key-mgmt: "{{ item.key_mgmt }}"
              psk: "{{ item.psk }}"
            ifname: wlan0
            autoconnect: true
            state: present
          loop: "{{ wifi_networks | flatten(levels=1) }}"
          ignore_errors: "{{ ansible_check_mode }}" # there is room for improvement here

        - name: Get current connection.autoconnect-retries
          ansible.builtin.command:
            argv:
              - /usr/bin/nmcli
              - --get-values
              - connection.autoconnect-retries
              - connection
              - show
              - "{{ item.str }}"
          register: autoconnect_retries_output
          ignore_errors: "{{ ansible_check_mode }}"
          changed_when: false
          failed_when: false
          loop: "{{ wifi_networks | flatten(levels=1) }}"

        - name: Configure wifi networks connection.autoconnect-retries to 0 (forever)
          ansible.builtin.command:
            argv:
              - /usr/bin/nmcli
              - connection
              - modify
              - "{{ item.str }}"
              - connection.autoconnect-retries
              - 0
          register: autoconnect_set
          ignore_errors: "{{ ansible_check_mode }}"
          changed_when: true
          failed_when: autoconnect_set.rc > 0
          when: "autoconnect_retries_output.results[ansible_loop.index0].stdout | int != 0"
          loop: "{{ wifi_networks | flatten(levels=1) }}"
          loop_control:
            extended: true

        - name: Get current connection.autoconnect-priority
          ansible.builtin.command:
            argv:
              - /usr/bin/nmcli
              - --get-values
              - connection.autoconnect-priority
              - connection
              - show
              - "{{ item.str }}"
          register: autoconnect_priority_output
          ignore_errors: "{{ ansible_check_mode }}"
          changed_when: false
          failed_when: false
          loop: "{{ wifi_networks | flatten(levels=1) }}"

        - name: Configure wifi networks connection.autoconnect-priority depending on the list position
          ansible.builtin.command:
            argv:
              - /usr/bin/nmcli
              - connection
              - modify
              - "{{ item.str }}"
              - connection.autoconnect-priority
              - "{{ reversed_index }}"
          register: autoconnect_set
          ignore_errors: "{{ ansible_check_mode }}"
          changed_when: true
          failed_when: autoconnect_set.rc > 0
          when: "autoconnect_priority_output.results[ansible_loop.index0].stdout | int != reversed_index | int"
          loop: "{{ wifi_networks | flatten(levels=1) }}"
          loop_control:
            extended: true
          vars:
            reversed_index: "{{ ansible_loop.index0 * -1 }}"

        - name: Deploy empty wpa_supplicant config
          ansible.builtin.copy:
            src: wpa_supplicant.conf
            dest: /etc/wpa_supplicant/wpa_supplicant.conf
            owner: root
            group: root
            mode: "0600"

- name: Deploy wlan0 reconnect hack script
  ansible.builtin.copy:
    src: wifi_reconnect_hack.sh
    dest: /usr/local/bin/wifi_reconnect_hack.sh
    owner: root
    group: root
    mode: "0750"

- name: Deploy wlan0 reconnect hack systemd service unit
  ansible.builtin.copy:
    src: wifi_reconnect_hack.service
    dest: /etc/systemd/system/wifi_reconnect_hack.service
    owner: root
    group: root
    mode: "0644"

- name: Deploy wlan0 reconnect hack systemd timer unit
  ansible.builtin.copy:
    src: wifi_reconnect_hack.timer
    dest: /etc/systemd/system/wifi_reconnect_hack.timer
    owner: root
    group: root
    mode: "0644"

- name: Enable the wlan0 reconnect hack systemd timer unit
  ansible.builtin.systemd_service:
    name: wifi_reconnect_hack.timer
    state: started
    enabled: true
    daemon_reload: true
  ignore_errors: "{{ ansible_check_mode }}"
